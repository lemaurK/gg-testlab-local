<product>
  <name>General Galactic TestLab</name>
  <author>LeMaur Kydd</author>
  <date>2025-09-03</date>
  <modes>
    <mode>public-demo</mode>
    <mode>local-mode</mode>
  </modes>
  <description>
    A browser-based web application for analyzing test data from propulsion systems and thruster firings at General Galactic.
    This tool enables engineers to visualize time-series sensor data, extract key propulsion features, track trends across test runs,
    and optionally apply ML models to classify and flag abnormal tests. Designed to run both as a hosted demo and a private local tool.
  </description>

  <goals>
    <goal>Help engineers extract insights from test logs with zero configuration.</goal>
    <goal>Ensure maximum data privacy via local processing and offline mode.</goal>
    <goal>Showcase full-stack software engineering capability (not just data science).</goal>
    <goal>Deliver a frictionless UX with modern, fast-loading web interface.</goal>
  </goals>

  <targetUsers>
    <user>Hardware engineers at General Galactic</user>
    <user>Test/propulsion engineers working with thruster logs</user>
    <user>Founders/decision makers evaluating technical talent</user>
  </targetUsers>

  <features>
    <feature>
      <name>TestRun Analyzer</name>
      <details>
        Accepts CSV, TSV, or JSON structured logs. Automatically infers headers and schema.
        Extracts rise time, peak thrust, burn duration, area under curve, and other derived metrics.
        Generates visualizations with Chart.js or Recharts.
      </details>
    </feature>
    <feature>
      <name>Drift Visualizer</name>
      <details>
        Compares multiple runs. Aligns time-series. Highlights shifts in key metrics. Overlay plots across uploads.
      </details>
    </feature>
    <feature>
      <name>AI Burn Classifier</name>
      <details>
        Optional ML-based labeling of runs as nominal or outlier. Uses pre-engineered features.
      </details>
    </feature>
    <feature>
      <name>Report Exporter</name>
      <details>
        Export selected visuals and metrics to a PDF report. Includes file info, timestamp, and analysis summary.
      </details>
    </feature>
  </features>

  <inputSupport>
    <formats>
      <format>.csv</format>
      <format>.tsv</format>
      <format>.json</format>
    </formats>
    <inference>
      Infer headers, types (e.g., thrust, temperature, pressure), and normalize timestamps if needed.
      Display a sample preview to user before analyzing.
    </inference>
  </inputSupport>

  <techStack>
    <frontend>Next.js</frontend>
    <ui>SHADCN UI + Tailwind CSS</ui>
    <charting>Chart.js or Recharts</charting>
    <csvParser>PapaParse (browser) or csv-parse (Node)</csvParser>
    <backend>FastAPI (optional for ML), Node API routes (Next.js)</backend>
    <mlModel>Scikit-learn or ONNX-deployed model for classification</mlModel>
    <deployment>Vercel (public demo), Localhost dev server (local mode)</deployment>
  </techStack>

  <gitStrategy>
    <repos>
      <repo>
        <name>gg-testlab-public</name>
        <url>https://github.com/yourusername/gg-testlab-public</url>
        <purpose>Public Vercel deployment of browser-based test analysis tool</purpose>
      </repo>
      <repo>
        <name>gg-testlab-local</name>
        <url>https://github.com/yourusername/gg-testlab-local</url>
        <purpose>Offline, privacy-first version for local deployment at secure facilities</purpose>
      </repo>
    </repos>
    <workflow>
      <step>Initialize git repo at project root</step>
      <step>Push changes after each feature milestone</step>
      <step>Use descriptive commit messages</step>
      <step>Push both repos to GitHub with README, MIT license, and code separation</step>
    </workflow>
  </gitStrategy>

  <deploymentModes>
    <mode>
      <name>public-demo</name>
      <details>
        Deployed via Vercel. All parsing and processing done client-side. No database or file retention.
        Disclaimer shown at upload step. GitHub link available in footer.
      </details>
    </mode>
    <mode>
      <name>local-mode</name>
      <details>
        Lightweight cloneable repo. Runs on `localhost:3000` via `npm run dev`. Full offline mode, no external dependencies.
      </details>
    </mode>
  </deploymentModes>

  <mvp>
    <requirement>CSV/TSV/JSON uploader with file preview</requirement>
    <requirement>Time-aligned visualization of sensor data</requirement>
    <requirement>Computation of basic thrust metrics (rise, peak, duration)</requirement>
    <requirement>Overlay & compare 2+ test runs visually</requirement>
    <requirement>Basic PDF export of metrics and graphs</requirement>
    <requirement>Clear UI with SHADCN design</requirement>
    <requirement>Support dual deployment (hosted + local)</requirement>
    <requirement>Auto-type detection and input inference</requirement>
    <requirement>Two clean GitHub repos with README + MIT license</requirement>
  </mvp>

  <stretchGoals>
    <goal>Support for waveform smoothing / denoising (via Savitzky-Golay or FFT)</goal>
    <goal>Interactive labeling for AI model retraining</goal>
    <goal>Dynamic report builder (include/exclude graphs)</goal>
    <goal>Custom plot overlays (select specific sensors)</goal>
    <goal>Simple onboarding modal for new users</goal>
    <goal>UI theme toggle (light/dark mode)</goal>
    <goal>Offline AI inference (via ONNX.js)</goal>
  </stretchGoals>

  <devNotes>
    <note>Modularize all core functions for reuse in both modes</note>
    <note>Use defensive programming for file parsing</note>
    <note>Keep startup time under 1s for public version</note>
    <note>Hardcode model path for local usage</note>
    <note>Make chart resizing responsive</note>
  </devNotes>

  <doneWhen>
    <condition>User can upload a test log and get accurate plots + analysis</condition>
    <condition>Founder has no concern over privacy (local mode or disclaimer)</condition>
    <condition>Tool looks and feels like a real internal product</condition>
    <condition>Both repos live, documented, and easily runnable</condition>
  </doneWhen>
</product>