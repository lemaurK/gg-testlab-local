{
  "development": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize Project Repositories and Tooling",
        "description": "Set up two separate GitHub repositories for public and local modes, initialize Next.js project structure, and configure core tooling.",
        "details": "Create 'gg-testlab-public' and 'gg-testlab-local' repos. Scaffold Next.js 14+ app with TypeScript. Add MIT license, README, and .gitignore. Configure Vercel deployment for public repo. Set up local repo for offline use (no external dependencies). Integrate Husky for pre-commit linting, Prettier, and ESLint. Ensure code modularity for reuse across both modes.",
        "testStrategy": "Verify both repos can be cloned, installed, and started independently. Confirm Vercel deploys public repo and local repo runs offline via 'npm run dev'. Check for presence of README, license, and code separation.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Implement File Upload and Schema Inference",
        "description": "Develop a robust file uploader supporting CSV, TSV, and JSON formats with automatic header/type inference and preview.",
        "details": "Use SHADCN UI components for file input. Integrate PapaParse (v6+) for CSV/TSV parsing in browser. For JSON, use built-in JSON.parse with schema validation via Zod. Implement header/type inference (e.g., detect thrust, temp, pressure columns). Normalize timestamps to ISO 8601. Display a preview table before analysis. Defensive error handling for malformed files.",
        "testStrategy": "Upload various sample files (CSV, TSV, JSON) with/without headers. Confirm correct parsing, schema inference, and preview rendering. Test error handling for invalid files.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Core Metric Extraction Engine",
        "description": "Extract propulsion metrics (rise time, peak thrust, burn duration, area under curve) from uploaded time-series data.",
        "details": "Implement modular data processing functions in TypeScript. Use array methods and math libraries (e.g., mathjs v12+) for calculations. Ensure functions are pure and reusable. Support edge cases (missing data, non-uniform sampling). Prepare extracted features for downstream ML and visualization.",
        "testStrategy": "Unit test metric extraction with synthetic and real test logs. Validate output against known values. Check for correct handling of edge cases.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Define Metric Extraction Requirements",
            "description": "Specify the mathematical definitions, expected input/output formats, and precision requirements for each propulsion metric (rise time, peak thrust, burn duration, area under curve).",
            "dependencies": [],
            "details": "Document how each metric should be calculated from time-series data, including handling of units, thresholds, and any domain-specific conventions. Clarify requirements for function purity, reusability, and compatibility with downstream ML/visualization.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Rise Time Calculation",
            "description": "Develop a pure, reusable TypeScript function to compute rise time from thrust time-series data.",
            "dependencies": [
              "3.1"
            ],
            "details": "Use array methods and mathjs to identify the time interval between defined start and peak thresholds. Ensure the function handles non-uniform sampling and missing data gracefully.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Peak Thrust Calculation",
            "description": "Create a pure, modular TypeScript function to determine the maximum thrust value and its corresponding timestamp.",
            "dependencies": [
              "3.1"
            ],
            "details": "Leverage efficient array traversal and mathjs utilities. Ensure robustness to missing or noisy data and support for non-uniformly sampled time-series.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement Burn Duration Calculation",
            "description": "Write a pure function to calculate burn duration based on thrust time-series, using configurable thresholds to define burn start and end.",
            "dependencies": [
              "3.1"
            ],
            "details": "Account for edge cases such as missing data points, noise, or ambiguous burn intervals. Support both uniform and non-uniform sampling intervals.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement Area Under Curve Calculation",
            "description": "Develop a reusable function to compute the area under the thrust-time curve, representing total impulse.",
            "dependencies": [
              "3.1"
            ],
            "details": "Use numerical integration (e.g., trapezoidal rule) compatible with non-uniform sampling. Ensure the function is pure and handles missing or irregular data.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Handle Edge Cases: Missing Data and Non-Uniform Sampling",
            "description": "Implement strategies and utility functions to detect and manage missing values and non-uniform time intervals across all metric extraction functions.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4",
              "3.5"
            ],
            "details": "Design and test fallback logic, interpolation, or imputation as needed. Validate that all metric calculations remain accurate and robust in the presence of data irregularities.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Prepare Extracted Features for ML and Visualization",
            "description": "Format and package the extracted metrics for downstream machine learning pipelines and visualization components.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4",
              "3.5",
              "3.6"
            ],
            "details": "Ensure output is structured, typed, and documented for easy integration. Include metadata (e.g., calculation status, warnings) and support for batch processing of multiple runs.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Build Interactive Data Visualization Components",
        "description": "Create responsive, interactive charts for time-series and metric overlays using Chart.js or Recharts.",
        "details": "Integrate Chart.js (v4+) or Recharts (v2+) with Next.js. Use SHADCN UI for layout. Implement time-aligned plots, overlays for multiple runs, and responsive resizing. Allow users to select which sensors to plot. Optimize for fast rendering (virtualization for large datasets).",
        "testStrategy": "Render charts with single and multiple test runs. Test overlay, zoom, and sensor selection. Validate responsiveness and performance with large files.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Implement Drift Visualizer for Run Comparison",
        "description": "Enable comparison of multiple test runs, highlighting metric shifts and aligning time-series data.",
        "details": "Develop logic to align runs by start time or key event. Highlight differences in rise time, peak, and other metrics. Overlay plots with color coding. Use memoization for performance. UI allows selection of runs to compare.",
        "testStrategy": "Compare 2+ runs with known metric drift. Confirm correct alignment and visual highlighting. Test with runs of different lengths and sampling rates.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Integrate Optional AI Burn Classifier",
        "description": "Add ML-based classification of test runs as nominal or outlier using pre-engineered features.",
        "details": "For public mode, use ONNX.js (v1.12+) to run a pre-trained scikit-learn model in-browser. For local mode, allow FastAPI backend (Python 3.11+, FastAPI v0.110+) to serve model if desired. Hardcode model path for local. UI toggle to enable/disable AI. Defensive fallback if model unavailable.",
        "testStrategy": "Run classifier on sample runs. Validate predictions match expected labels. Test both ONNX.js (browser) and FastAPI (local) inference paths.",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Integrate ONNX.js for Browser Inference",
            "description": "Set up ONNX.js (v1.12+) in the frontend to enable in-browser inference of the pre-trained scikit-learn model using ONNX format.",
            "dependencies": [],
            "details": "Install ONNX.js, load the ONNX model, and implement inference logic in the browser. Ensure compatibility with the feature set and optimize for performance using WebAssembly or WebGL as appropriate.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Set Up FastAPI Backend for Local Inference",
            "description": "Configure a FastAPI (Python 3.11+, FastAPI v0.110+) backend to serve the same pre-trained model for local inference.",
            "dependencies": [],
            "details": "Implement an API endpoint in FastAPI to accept feature input and return classification results. Hardcode the model path and ensure the backend can load and serve the ONNX/scikit-learn model.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Model Loading and Fallback Logic",
            "description": "Develop logic to load the model in both browser and backend modes, with fallback mechanisms if the model is unavailable.",
            "dependencies": [
              "6.1",
              "6.2"
            ],
            "details": "Detect environment (public/local), attempt to load the model accordingly, and provide a fallback or error message if loading fails. Ensure seamless switching between inference modes.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Build UI Toggle for AI Classification",
            "description": "Add a user interface toggle to enable or disable the AI burn classifier feature.",
            "dependencies": [],
            "details": "Implement a toggle in the UI that allows users to activate or deactivate AI-based classification. Ensure the toggle state is respected throughout the application.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Connect Feature Extraction to Classifier",
            "description": "Wire up the pre-engineered feature extraction pipeline to the classifier inference logic in both browser and backend modes.",
            "dependencies": [
              "6.1",
              "6.2"
            ],
            "details": "Ensure that extracted features from test runs are correctly formatted and passed to the classifier, and that the classifier output is integrated back into the application workflow.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Implement Defensive Error Handling for Model Unavailability",
            "description": "Add robust error handling to gracefully manage scenarios where the model cannot be loaded or inference fails.",
            "dependencies": [
              "6.3",
              "6.5"
            ],
            "details": "Display user-friendly error messages or fallbacks in the UI if the model is unavailable or inference fails, and ensure the application remains stable.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Test Both Inference Paths (Browser and Backend)",
            "description": "Thoroughly test the AI classifier in both browser (ONNX.js) and local (FastAPI) modes to validate correct operation and fallback behavior.",
            "dependencies": [
              "6.3",
              "6.5",
              "6.6"
            ],
            "details": "Run sample test cases, validate predictions against expected labels, and verify that toggling and fallback mechanisms work as intended in both environments.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Develop PDF Report Exporter",
        "description": "Allow users to export selected charts and metrics to a PDF report with file info, timestamp, and summary.",
        "details": "Use pdf-lib (v1.17+) or jsPDF (v2.5+) for client-side PDF generation. Include selected visuals, metrics, file metadata, and analysis summary. UI for selecting which charts/metrics to include. Ensure export works offline.",
        "testStrategy": "Export reports with various selections. Validate PDF content, formatting, and offline functionality. Check for correct metadata and summary.",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement Dual Deployment Modes (Public & Local)",
        "description": "Support both Vercel-hosted public demo and fully offline local mode with privacy guarantees.",
        "details": "Configure Next.js build scripts for both modes. In public mode, ensure all processing is client-side, no file retention, and show disclaimer at upload. In local mode, disable all external calls, ensure offline capability, and hardcode model paths. Add mode switch logic and environment detection.",
        "testStrategy": "Deploy to Vercel and run locally. Confirm mode-specific behaviors (disclaimer, offline, privacy). Test switching between modes.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3,
          4,
          5,
          6,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Configure Next.js Build Scripts for Dual Modes",
            "description": "Set up Next.js build scripts and configuration to support both public (Vercel-hosted) and local (offline) deployment modes.",
            "dependencies": [],
            "details": "Ensure build scripts can distinguish between modes using environment variables or build-time flags. Configure scripts in package.json and next.config.js to enable mode-specific settings. Document how to trigger each mode during build and deployment.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Client-Side Only Processing for Public Mode",
            "description": "Ensure all data processing in public mode occurs exclusively on the client, with no server-side file retention or processing.",
            "dependencies": [
              "8.1"
            ],
            "details": "Audit and refactor upload and processing logic to guarantee all operations are performed in-browser. Remove or disable any server-side file handling or storage for public deployments.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Upload Disclaimer for Public Mode",
            "description": "Display a clear disclaimer to users at file upload in public mode, informing them about privacy and data handling.",
            "dependencies": [
              "8.2"
            ],
            "details": "Implement UI logic to show a modal or banner at the upload step in public mode. Ensure the disclaimer is prominent and cannot be bypassed. Text should clarify that no files are stored or retained.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Disable All External Calls in Local Mode",
            "description": "Prevent any external network requests or API calls when running in local (offline) mode.",
            "dependencies": [
              "8.1"
            ],
            "details": "Audit codebase for all fetch, axios, or other network calls. Add conditional logic to block or mock these calls in local mode. Ensure no analytics, error reporting, or CDN requests are made.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Ensure Offline Capability in Local Mode",
            "description": "Guarantee that the application is fully functional without internet access when running locally.",
            "dependencies": [
              "8.4"
            ],
            "details": "Test and update all features to work offline. Bundle all required assets and dependencies. Remove or replace any features that require online resources.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Hardcode Model Paths for Local Mode",
            "description": "Configure local mode to use hardcoded, local file paths for all ML models and resources.",
            "dependencies": [
              "8.5"
            ],
            "details": "Update configuration and code to reference local file system paths for models. Ensure these paths are not used in public mode. Document expected model locations for local deployments.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "Implement Mode Switch Logic and Environment Detection",
            "description": "Develop logic to detect the current deployment environment and switch between public and local modes accordingly.",
            "dependencies": [
              "8.1"
            ],
            "details": "Use environment variables, build-time flags, or runtime checks to determine mode. Centralize mode detection and expose it to the rest of the app for conditional logic.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "Test All Mode-Specific Behaviors",
            "description": "Thoroughly test both deployment modes to confirm correct, secure, and private operation in each.",
            "dependencies": [
              "8.3",
              "8.6",
              "8.7"
            ],
            "details": "Deploy to Vercel and run locally. Verify disclaimer display, offline functionality, privacy guarantees, and correct model loading. Test switching between modes and document test results.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Polish UI/UX and Accessibility",
        "description": "Refine interface with SHADCN UI and Tailwind CSS, ensuring fast load, responsive design, and accessibility.",
        "details": "Apply SHADCN UI patterns for all components. Use Tailwind CSS (v3.4+) for layout and theming. Implement theme toggle (light/dark). Add onboarding modal for new users. Ensure keyboard navigation and ARIA labels. Optimize bundle size for <1s startup in public mode.",
        "testStrategy": "Run Lighthouse and axe-core audits. Test on desktop and mobile. Validate theme toggle, onboarding, and accessibility features.",
        "priority": "medium",
        "dependencies": [
          4,
          5,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Finalize Documentation and Release Workflow",
        "description": "Document all features, setup, and usage. Ensure clean release workflow for both repos.",
        "details": "Write comprehensive README for both repos, including setup, usage, and privacy notes. Document API (if any), deployment, and troubleshooting. Add MIT license. Set up GitHub Actions for lint/test/build checks. Use descriptive commit messages and push after each milestone.",
        "testStrategy": "Review documentation for completeness and clarity. Test setup instructions on clean environment. Validate CI workflows and release process.",
        "priority": "medium",
        "dependencies": [
          1,
          8,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-09-03T20:58:58.624Z",
      "updated": "2025-09-03T20:59:52.076Z",
      "description": "Tasks for development context"
    }
  }
}